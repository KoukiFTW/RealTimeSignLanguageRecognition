import cv2
import mediapipe as mp
import numpy as np
import os
import pandas as pd

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=1, min_detection_confidence=0.5)

def extract_landmarks_from_image(image):
    """
    Extract 21 hand landmarks from the image using MediaPipe Hands.
    :param image: Input image (numpy array).
    :return: Flattened landmark array (x, y, z) or None if no hand is detected.
    """
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    result = hands.process(image_rgb)

    if result.multi_hand_landmarks:
        for hand_landmarks in result.multi_hand_landmarks:
            # Extract x, y, z coordinates for all 21 landmarks
            landmarks = []
            for lm in hand_landmarks.landmark:
                landmarks.extend([lm.x, lm.y, lm.z])
            return np.array(landmarks)
    return None

def process_dataset(image_dir, csv_file, output_file):
    """
    Process images in the dataset to extract hand landmarks.
    :param image_dir: Directory containing images.
    :param csv_file: CSV file with image file names and labels.
    :param output_file: Output .npz file to save landmarks and labels.
    """
    data = pd.read_csv(csv_file)
    landmarks_list = []
    labels_list = []

    for _, row in data.iterrows():
        img_path = os.path.join(image_dir, row['filename'])
        img = cv2.imread(img_path)

        if img is None:
            print(f"Error loading image: {img_path}")
            continue

        landmarks = extract_landmarks_from_image(img)
        if landmarks is not None:
            landmarks_list.append(landmarks)
            labels_list.append(row['class'])

    # Convert to numpy arrays
    landmarks_array = np.array(landmarks_list)
    labels_array = np.array(labels_list)

    # Save to .npz file
    np.savez_compressed(output_file, landmarks=landmarks_array, labels=labels_array)
    print(f"Landmark data saved to {output_file}")

def main():
    # Paths
    train_dir = "data/train"
    test_dir = "data/test"
    train_csv = "data/train_labels.csv"
    test_csv = "data/test_labels.csv"
    train_output = "data/landmarks_train.npz"
    test_output = "data/landmarks_test.npz"

    # Process train and test datasets
    process_dataset(train_dir, train_csv, train_output)
    process_dataset(test_dir, test_csv, test_output)

if __name__ == "__main__":
    main()
